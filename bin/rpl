#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'rpl'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/rpl` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/rpl now"
  exit 64
end

include GLI::App

program_desc 'RPL: Ruby Propositional Logic.'

version Rpl::VERSION

desc 'Perform the action with verbose output.'
switch [:v,:verbose]

desc 'Use a database to store the knowledge base.'
arg_name 'db_data_store'
flag [:db,:db_data_store]

desc 'Specify a file to store the knowledge base'
default_value File.join(ENV['HOME'],'.rpl/rpl.kb')
arg_name 'file_data_store'
flag [:f,:file_data_store]

desc 'Send the Knowledge Base a query.'
arg_name 'ask'
command :ask do |c|
  c.desc 'Full path to a file with queries to process.'
  c.arg_name 'path'
  c.flag [:f,:file]

  c.action do |global_options,options,args|
    puts "Global:"
    puts "-v - #{global_options[:v] ? true : false}"
    puts "-kb - #{global_options[:kb]}"
    puts "Command:"
    puts "-f #{options[:f]}"
    puts "Args:"
    puts "#{args.join(', ')}"
  end
end

desc 'Insert sentences into the Knowledge Base.'
arg_name 'tell'
command :tell do |c|
  c.desc 'Full path to a file with logic rules to process.'
  c.arg_name 'input'
  c.flag [:i,:input]

  c.desc 'Specify a knowledge base name to store the sentences in.'
  c.default_value 'default'
  c.arg_name 'kb_name'
  c.flag [:n,:name]
  
  c.action do |global_options,options,args|
    # Parse input
    # If parse succedes open KB.
    # Insert parse results into KB.
    # Save and close KB.
    puts "About to call Rpl::Tell with g: #{global_options}, o: #{options}, a: #{args}"
    Rpl::Tell.new(global_options, options, args).tell
  end
end

desc 'Describe view here'
arg_name 'Describe arguments to view here'
command :view do |c|
  c.action do |global_options,options,args|
    File.open(global_options[:kb], 'r') do |file|
      line = file.readline
      puts line
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
